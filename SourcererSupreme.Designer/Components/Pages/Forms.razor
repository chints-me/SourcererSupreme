@page "/projects/{ProjectId:int}/forms"
@using SourcererSupreme.Designer.Data.Models
@inject IDbContextFactory<DesignerDbContext> DbFactory
@inject ISnackbar Snackbar
@inject NavigationManager Navigation

<MudContainer MaxWidth="MaxWidth.Large">
    <MudGrid>
        <MudItem xs="12">
            <MudPaper Class="d-flex flex-row align-center justify-space-between pa-4 mb-4">
                <MudText Typo="Typo.h5">Forms</MudText>
                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           StartIcon="@Icons.Material.Filled.Add"
                           OnClick="OpenCreateDialog">
                    New Form
                </MudButton>
            </MudPaper>
        </MudItem>

        @if (_forms.Any())
        {
            @foreach (var form in _forms)
            {
                <MudItem xs="12" sm="6" md="4">
                    <MudCard Elevation="4" Class="ma-2">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h6">@form.Name</MudText>
                            </CardHeaderContent>
                            <CardHeaderActions>
                                <MudMenu Icon="@Icons.Material.Filled.MoreVert">
                                    <MudMenuItem OnClick="@(() => OpenEditDialog(form))">
                                        Edit
                                    </MudMenuItem>
                                    <MudMenuItem OnClick="@(() => DeleteForm(form))"
                                                 Icon="@Icons.Material.Filled.Delete">
                                        Delete
                                    </MudMenuItem>
                                </MudMenu>
                            </CardHeaderActions>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudText>@form.Description</MudText>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            }
        }
        else
        {
            <MudItem xs="12">
                <MudAlert Severity="Severity.Info">
                    No forms found. Create your first form to get started!
                </MudAlert>
            </MudItem>
        }
    </MudGrid>
</MudContainer>

<MudDialog @bind-IsVisible="_dialogVisible">
    <TitleContent>
        <MudText Typo="Typo.h6">@(_editingForm == null ? "New Form" : "Edit Form")</MudText>
    </TitleContent>
    <DialogContent>
        <MudTextField @bind-Value="_formName"
                      Label="Form Name"
                      Required="true"
                      RequiredError="Form name is required" />
        <MudTextField @bind-Value="_formDescription"
                      Label="Description"
                      Lines="3"
                      Class="mt-3" />
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="CloseDialog">Cancel</MudButton>
        <MudButton Color="Color.Primary"
                   OnClick="SaveForm">
            @(_editingForm == null ? "Create" : "Save")
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Parameter] public int ProjectId { get; set; }

    private List<Form> _forms = new();
    private bool _dialogVisible;
    private string _formName = "";
    private string _formDescription = "";
    private Form? _editingForm;

    protected override async Task OnInitializedAsync()
    {
        await LoadForms();
    }

    private async Task LoadForms()
    {
        await using var context = await DbFactory.CreateDbContextAsync();
        _forms = await context.Forms
            .Where(f => f.ProjectId == ProjectId)
            .ToListAsync();
    }

    private void OpenCreateDialog()
    {
        _editingForm = null;
        _formName = "";
        _formDescription = "";
        _dialogVisible = true;
    }

    private void OpenEditDialog(Form form)
    {
        _editingForm = form;
        _formName = form.Name;
        _formDescription = form.Description;
        _dialogVisible = true;
    }

    private void CloseDialog()
    {
        _dialogVisible = false;
    }

    private async Task SaveForm()
    {
        if (string.IsNullOrWhiteSpace(_formName))
            return;

        await using var context = await DbFactory.CreateDbContextAsync();

        if (_editingForm == null)
        {
            var form = new Form
            {
                Name = _formName,
                Description = _formDescription,
                ProjectId = ProjectId,
                CreatedAt = DateTime.UtcNow
            };
            context.Forms.Add(form);
        }
        else
        {
            var form = await context.Forms.FindAsync(_editingForm.Id);
            if (form != null)
            {
                form.Name = _formName;
                form.Description = _formDescription;
            }
        }

        await context.SaveChangesAsync();
        await LoadForms();

        Snackbar.Add(_editingForm == null ? "Form created successfully!" : "Form updated successfully!", Severity.Success);

        _dialogVisible = false;
    }

    private async Task DeleteForm(Form form)
    {
        // Optionally, show a confirmation dialog here
        await using var context = await DbFactory.CreateDbContextAsync();
        context.Forms.Remove(form);
        await context.SaveChangesAsync();
        await LoadForms();
        Snackbar.Add("Form deleted successfully!", Severity.Success);
    }
}